{"version":3,"sources":["js/05-async-code-with-promise.js"],"names":["asyncLoop","count","Promise","resolve","reject","total","i","allSettled","then","data","console","log","catch","err"],"mappings":";AAiBA,SAASA,EAAUC,GACR,OAAA,IAAIC,QAAQ,CAACC,EAAQC,KAChBC,IAAAA,EAAQ,EACR,IAAA,IAAIC,EAAE,EAAGA,EAAIL,EAAOK,GAAI,EACxBD,GAASC,EAEVD,EAAQ,IAAO,EAClBF,EAAQE,GAAeD,EAAO,kBAqB1CF,QAAQK,WAAW,CAACP,EAAU,KAAMA,EAAU,KAAOA,EAAU,MAC9DQ,KAAMC,GAASC,QAAQC,IAAIF,IAC3BG,MAAMC,GAAOH,QAAQC,IAAIE","file":"05-async-code-with-promise.b47d15ab.js","sourceRoot":"../src","sourcesContent":["\n// const promissed = new Promise((resolve,reject) => {\n//     let total = 0;\n//     for(let i=0; i < 95; i +=1){\n//         total += i;\n//     }\n//     if(total % 10 === 0){\n//     resolve(total);} else {reject('Promis error')}\n// });\n// promissed.then((result) => {\n//     console.log(result);\n//     return result;\n// })\n//     .then((result) => console.log('This is second result', result - result / 1.1))\n//     .catch(err => console.log(err))\n// Async function: function with return new Promise which include some code of loop foe example.\n//  it can have two varients of executing: resolve and reject. result we get via then and catch\nfunction asyncLoop(count) {\n    return new Promise((resolve,reject) => {\n            let total = 0;\n            for(let i=0; i < count; i +=1){\n                total += i;\n            }\n            if(total % 10 === 0){\n            resolve(total);} else {reject('Promis error')}\n        }); \n}\n// asyncLoop(98)\n// .then(data => console.log(data))\n// .catch(err => console.log(err))\n// console.log(2);\n// Methods of promises:\n// 1.Promice.race();\n// 2.Promise.all();\n// 3. Promise.allSettled();\n// 4. Promise.allSettled()\n// Promise.all([asyncLoop(100), asyncLoop(1000), asyncLoop(20)])\n// .then((data) => console.log(data))\n// .catch(err => console.log(err));\n// If all promisses are resolve this method returns array of results, in other way - error\n// It uses for gathering different information from different sources and then getting the sum results\n// Promise.race([asyncLoop(100), asyncLoop(1000), asyncLoop(20)])\n// .then((data) => console.log(data))\n// .catch(err => console.log(err)); \n// it gives the result of executing the firstest  executed  of promisses\nPromise.allSettled([asyncLoop(100), asyncLoop(1000), asyncLoop(10)])\n.then((data) => console.log(data))\n.catch(err => console.log(err)); \n// it is wider varient of Promise.all(). it gives the array with the information of executing every promise"]}